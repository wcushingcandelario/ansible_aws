---

- name: Build an environment
  hosts: localhost
  connection: local
  tasks:
    - debug: msg='Building Clustered'
      when: clustered_environment

    - debug: msg='Building Single'
      when: not clustered_environment

- name: Create RDS
  connection: local
  hosts: localhost
  roles:
    - create_rds
  tags:
    - rds

- name: Set universal facts
  connection: local
  hosts: localhost
  tasks:
    - set_fact:
        new_lc_name: "lc-{{ deploy_type }}-{{ ansible_date_time.epoch }}_config"
        asg_name: "{{ deploy_type }}_autoscale"

- name: Build Promo Engine
  connection: local
  hosts: localhost
  roles:
    - promo_engine
  tags:
    - tagged
    - promo_engine

- name: Build Inventory Manager
  connection: local
  hosts: localhost
  roles:
    - inventory_manager
  tags:
    - tagged
    - inventory_manager

- name: Find AMI ID
  hosts: localhost
  connection: local
  roles:
    -  { role: find_ovc_ami, ami_region: "{{ region }}" }
  tags:
    - asg
    - find_ovc_ami
    - launch_ami

- name: Add AMI ID to facts
  hosts: localhost
  connection: local
  tasks:
    - name: Use set_fact to AMI
      set_fact:
        image_id: "{{ ami_find.results[0].ami_id }}"
      when: image_id is undefined and ami_find.results is defined
    - name: Use set_fact to AMI
      set_fact:
        image_id: BAD_AMI_ID__LOOKUP_FAILED
      when: image_id is undefined and ami_find.results is undefined
  tags:
    - asg
    - find_ovc_ami
    - launch_ami


- hosts: localhost
  connection: local
  tasks:
    - name: Display new AMI ID
      debug:
        msg="{{deploy_type}} will now be launched with {{ image_id }}"
    - name: Present new AMI ID
      pause:
        prompt: "{{deploy_type}} will now be launched with {{ image_id }}"
        seconds: 30

- name: Launch temporary new instance
  hosts: localhost
  connection: local
  roles:
    - launch_instance
  vars:
    role_tag: "temporary"
  tags:
    - upgrade_databases

- name: Install tools on the temporary instance
  hosts: "{{ ami_instance.tagged_instances.0.private_ip }}"
  tasks:
    - local_action: wait_for port=22 host="{{ ami_instance.tagged_instances.0.private_ip }}" search_regex=OpenSSH delay=10
    - name: Install MySQL
      yum:
        name: mysql
        state: installed
  tags:
    - upgrade_databases

- hosts: "{{ ami_instance.0.private_ip }}"
  roles:
    - upgrade_db
  vars:
    upgrade_from: 5.11.0
  tags:
    - upgrade_databases

- name: Terminate temporary instance
  tasks:
    - ec2:
        state: absent
        region: "{{ region }}"
        instance_ids: "{{ ami_instance.tagged_instances.0.id }}"
  tags:
    - upgrade_databases

- name: Launch New Instance
  hosts: localhost
  connection: local
  roles:
    - { role: launch_instance, when: not clustered_environment }
  tags:
    - launch_ami

- name: Create ELB and ASG
  hosts: localhost
  connection: local
  roles:
    - { role: create-elb-pos, when: clustered_environment and max_size > 1 }
    - { role: create-elb-dash, when: clustered_environment and max_size > 1 }
    - { role: create-auto, when: clustered_environment and max_size > 1 }
    - { role: create_single_ssl_elb_asg_lc, when: clustered_environment and max_size == 1 }
  vars:
    deploy_pos: "{{ deploy_type }}-POS"
    deploy_dash: "{{ deploy_type }}-Dash"
  tags:
    - asg
