---

- name: Create Utility RDS
  connection: local
  hosts: localhost
  roles:
    - create_rds
  tags:
    - rds_util
  vars:
    environment_name: util-rds
    rds_security_group: "{{ ami_baker_rds_security_group }}"
    rds_subnet_group: "{{ ami_baker_rds_subnet_group }}"
    multirdszone: no
    rds_instance_type: "db.m4.micro"
    deploy_type: utility
    region: "{{ ami_baker_region }}"

- name: Build temporary instance
  hosts: localhost
  remote_user: ec2-user
  connection: local
  gather_facts: False
  roles:
    - { role: find_ovc_ami, force_ami_customer: 'ovc' }
    - ami_baker_pre
  vars:
    ansible_ssh_private_key_file: "{{ ansible_ssh_private_key_file }}"
    ami_region: "{{ ami_baker_region }}"
    key: "{{ key }}"
    ovc_security_groups: "{{ ami_baker_ovc_security_groups }}"
    vpc_subnet_public: "{{ ami_baker_vpc_subnet_public }}"
    instance_type: t2.small
    jetty_user_login: jetty
    jetty_dir: /opt/jetty
    ovc_server_user_dir: /opt/ovc
    webserver_user: www-data
    s3install: true
    ovcDB_host: "mysql-utility.{{ dns_domain }}"
    ovcNOSQLDB_host: "mongodb-utility01.{{ dns_domain }}"


- hosts: just_baked
  remote_user: ec2-user
  become: yes
  become_user: root
  roles:
    # Basics for all AMIs and the Vanilla stuff for MPOS AMIs
    - { role: common, when: customer == 'vanilla' and ami_role == 'ami_builder' }
    - { role: jetty, when: customer == 'vanilla' and ami_role == 'ami_builder' }
    - { role: oneview, when: customer == 'vanilla' and ami_role == 'ami_builder' }

    # Mongo AMI
    - { role: mongo_cm_ami, when: ami_role == 'mongo_ami' }

    # Custom JAR and data files
    - { role: install_customizations_dt, when: customer == 'dt' and ami_role == 'ami_builder' }
    - { role: install_customizations_tp, when: customer == 'tp' and ami_role == 'ami_builder' }
    - { role: install_customizations_mb, when: customer == 'mb' and ami_role == 'ami_builder' }
    - { role: install_customizations_Gstar, when: customer == 'gs' and ami_role == 'ami_builder' }
#    - { role: install_customizations_demo, when: customer == 'ovc' }

    # Extras tjat meed to be done after the custom JARS/data
    - { role: ricbra.logentries, when: customer == 'vanilla' and ami_role == 'ami_builder' }
    - { role: nginx_proxy, when: customer == 'vanilla' and ami_role == 'ami_builder' }
    - { role: newrelic_infrastructure, when: ami_role == 'ami_builder' }
    - { role: newrelic_java, when: ami_role == 'ami_builder' }

    # DevOps customisations specific to a customer (SSL certs, configs, etc.)
#    - { role: install_devops_dt, when: customer == 'dt' }
    - { role: install_devops_tp, when: customer == 'tp' and ami_role == 'ami_builder' }
    - { role: install_devops_mb, when: customer == 'mb' and ami_role == 'ami_builder' }
#    - { role: install_devops_gstar, when: customer == 'gs' }
    - { role: install_devops_demo, when: customer == 'ovc' and ami_role == 'ami_builder' }
  vars:
    ansible_ssh_private_key_file: "{{ ansible_ssh_private_key_file }}"
    region: "{{ ami_baker_region }}"
    key: "{{ key }}"
    ovc_security_groups: "{{ ami_baker_ovc_security_groups }}"
    vpc_subnet_public: "{{ ami_baker_vpc_subnet_public }}"
    instance_type: m4.large
    jetty_user_login: jetty
    jetty_dir: /opt/jetty
    ovc_server_user_dir: /opt/ovc
    webserver_user: www-data
    s3install: true
    ovcDB_host: "utility-mysql.{{ dns_domain }}"
    ovcNOSQLDB_host: "mongodb-utility01.{{ dns_domain }}"


- hosts: localhost
  connection: local
  roles:
    - ami_baker_post
  vars:
    ansible_ssh_private_key_file: "{{ ansible_ssh_private_key_file }}"
    region: "{{ ami_baker_region }}"
    key: "{{ key }}"
    ovc_security_groups: "{{ ami_baker_ovc_security_groups }}"
    vpc_subnet_public: "{{ ami_baker_vpc_subnet_public }}"
    instance_type: m4.large
    jetty_user_login: jetty
    jetty_dir: /opt/jetty
    ovc_server_user_dir: /opt/ovc
    webserver_user: www-data
    s3install: true
    ovcDB_host: "utility-mysql.{{ dns_domain }}"
    ovcNOSQLDB_host: "mongodb-utility01.{{ dns_domain }}"

- hosts: just_baked
  remote_user: ec2-user
  become: yes
  become_user: root
  roles:
    - { role: install_devops_demo, when: ami_role == 'ami_builder' }
  vars:
    ansible_ssh_private_key_file: "{{ ansible_ssh_private_key_file }}"
    region: "{{ ami_baker_region }}"
    key: "{{ key }}"
    ovc_security_groups: "{{ ami_baker_ovc_security_groups }}"
    vpc_subnet_public: "{{ ami_baker_vpc_subnet_public }}"
    instance_type: m4.large
    jetty_user_login: jetty
    jetty_dir: /opt/jetty
    ovc_server_user_dir: /opt/ovc
    webserver_user: www-data
    s3install: true
    ovcDB_host: "utility-mysql.{{ dns_domain }}"
    ovcNOSQLDB_host: "mongodb-utility01.{{ dns_domain }}"


- hosts: localhost
  connection: local
  roles:
    - { role: bundle_demo_ami, when: ami_role == 'ami_builder' }
  tasks:
    - name: terminate temporary instance
      local_action:
        module: ec2
        state: absent
        region: "{{ region }}"
        instance_ids: "{{ just_created_instance_id }}"
      when: ami_role == 'mongo_ami'
      tags:
        - terminate_ami
