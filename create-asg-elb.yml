---
- name: Create a new ELB, Launch Config and Auto scaling group based on existing AMI
  hosts: localhost
  connection: local
  gather_facts: False


  tasks:
  - name: create ELB
    local_action:
      module: ec2_elb_lb
      name: "{{ deploy_type }}"
      state: present
      region: "{{ region }}"
      scheme: internal
      connection_draining_timeout: 120
      idle_timeout: 300
      subnets: "{{ elbsubnets }}"
      security_group_ids: "sg-887dc9ef,sg-9fbd1ef8"
      listeners:
      - protocol: tcp
        load_balancer_port: 443
        instance_port: 443
      - protocol: tcp
        load_balancer_port: 8080
        instance_port: 8080
      health_check:
        ping_protocol: http # options are http, https, ssl, tcp
        ping_port: 8080
        ping_path: "/ovcpos" # not required for tcp or ssl
        response_timeout: 5 # seconds
        interval: 30 # seconds
        unhealthy_threshold: 2
        healthy_threshold: 10
    register: elb_new

  - name: debug elb create
  debug: "var=elb_new"

    - name: createe second ELB
      local_action:
        module: ec2_elb_lb
        name: "{{ deploy_dash }}"
        state: present
        region: "{{ region }}"
        scheme: internal
        connection_draining_timeout: 120
        idle_timeout: 300
        subnets: "{{ elbsubnets }}"
        security_group_ids: "sg-887dc9ef,sg-9fbd1ef8"
        listeners:
        - protocol: https
          load_balancer_port: 443
          instance_port: 80
        - stickiness:
            type: application
            enabled: yes
        health_check:
          ping_protocol: http # options are http, https, ssl, tcp
          ping_port: 8080
          ping_port: 80
          ping_path: "/ovcdashboard/login" # not required for tcp or ssl
          response_timeout: 5 # seconds
          interval: 30 # seconds
          unhealthy_threshold: 2
          healthy_threshold: 10
    register: elb_two

    - name: debug elb createe
    debug: "var=elb_two"

  - name: Get ELB details after creation
    local_action:
      module: ec2_elb_facts
      names:
        - "{{ deploy_type }}"
        - "{{ deploy_dash }}"
      region: "{{ region }}"
    register: elb_facts

  - name: Add new Route53 entry
    route53:
      command: "create"
      zone: "ovchosting.co.uk"
      hosted_zone_id: "Z3A98VA7X0SL0T"
      private_zone: "true"
      record: "preprod-dash.ovchosting.co.uk"
      type: "CNAME"
      ttl: 300
      value: "{{ elb_facts.elbs.0.dns_name }}"
      overwrite: yes


  - name: create launch config
    local_action:
      module: ec2_lc
      name: "{{ new_lc_name }}"
      image_id: "{{ image_id }}"
      key_name: "{{ key }}"
      region: "{{ region }}"
      security_groups: ["{{ ovc_security_groups }}"]
      instance_type: "{{ instance_type_asg }}"
      instance_monitoring: yes
      assign_public_ip: yes
      instance_profile_name: "{{ IAMROLE }}"
# Note
#    Lookups are executed with a cwd relative to the role or play, as opposed to
#   local tasks which are executed with the cwd of the executed script.
# http://docs.ansible.com/ansible/playbooks_lookups.html
      user_data: "{{ lookup('file', 'scripts/' + 'preprod' + '-user_data.sh') }}"
    register: debuglaunch

  - name: debug script copy
    debug: "var=debuglaunch"


  - name: create auto scaling group
    local_action:
      module: ec2_asg
      name: "{{ asg_name }}"
      launch_config_name: "{{ new_lc_name }}"
      vpc_zone_identifier: "{{ elbsubnets }}"
      load_balancers: "{{ 'deploy_type', 'deploy_dash' }}"
      load_balancers: ["{{ 'deploy_type', 'deploy_dash' }}"]
      replace_all_instances: yes
      health_check_type: ELB
      min_size: 2
      max_size: 5
      desired_capacity: 2
      region: "{{ region }}"
      tags:
        - Name: "{{ deploy_type }}-{{ ovc_version }}"
        - monitor: true
        - environment: preprod
    register: asglaunch

  - name: debug auto scaling update
    debug: "var=asglaunch"
