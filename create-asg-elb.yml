---
- name: Update a running auto scaling configuration with a new ami
  hosts: localhost
  connection: local
  gather_facts: False

  #vars:
    #new_image_id:
    #new_lc_name:

  tasks:
  - name: create ELB
    local_action: 
      module: ec2_elb_lb
      name: "{{ deploy_type }}"
      state: present
      region: "{{ region }}"
      connection_draining_timeout: 120
      idle_timeout: 300
      subnets: "{{ elb-subnets }}"
      listeners:
      - protocol: http
        load_balancer_port: 80
        instance_port: 80
      health_check:
        ping_protocol: http # options are http, https, ssl, tcp
        ping_port: 80
        ping_path: "/index.html" # not required for tcp or ssl
        response_timeout: 5 # seconds
        interval: 30 # seconds
        unhealthy_threshold: 2
        healthy_threshold: 10
      access_logs:
        interval: 5 # minutes (defaults to 60)
        s3_location: "sglogs" # This value is required if access_logs is set
        s3_prefix: "ELBlogs"
    register: elb_new


  - name: create launch config
    local_action:ec2_lc:
      name: "{{ new_lc_name }}"
      image_id: "{{ new_image_id }}"
      key_name: "{{ key }}"
      region: "{{ region }}"
      security_groups: "{{ ovc_security_groups }}"
      instance_type: "{{ instance_type }}" 
      instance_monitoring: yes
      assign_public_ip: yes
      instance_profile_name: "{{ IAMROLE }}"
      user_data: "{{ lookup('file', 'scripts/' + deploy_type + '-user_data.sh') }}"
    register: debuglaunch
  - name: debug script copy
    debug: "var=debuglaunch"


  - ec2_asg:
      name: "{{ asg_name }}"
      launch_config_name: "{{ new_lc_name }}"
      replace_all_instances: yes
      health_check_type: ELB
      min_size: 2
      max_size: 5
      desired_capacity: 2
      region: "{{ region }}"
      tags:
        - Name: "{{ deploy_type }}-{{ ovc_version }}"
    register: asgupdate
  - name: debug auto scaling update
    debug: "var=asglaunch"
