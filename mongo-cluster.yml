---
#- hosts: localhost
#  connection: local
#  gather_facts: False
#
#  tasks:
#  - name: Include the default variables and find ami
#    include_vars: vars/mongo-{{ env }}-defaults.yml

#create first server
- name: Create first server
  hosts: localhost
  vars:
    count: 01
  connection: local
  gather_facts: False
  roles:
   - find_ami
   - create_server

  tasks:
   - name: Clear hosts template
     file: path=hosts state=absent

   - name: add host to group
     add_host: name={{ item.private_ip }} groups=just_created
     with_items: ami_instance.instances

   - name: create hosts file
     shell: echo "{{ item.private_ip }} mongodb0{{ count }}.preprod-int.ovchosting.co.uk mongodb0{{ count }}" >> hosts
     with_items: ami_instance.instances

   - name: wait for ssh to come up
     wait_for: host={{ item.private_ip }} delay=60 port=22 state=started timeout=320
     with_items: ami_instance.instances

#create second server
- name: Create second server
  hosts: localhost
  vars:
    count: 02
  connection: local
  gather_facts: False
  roles:
   - create_server

  tasks:
   - name: add host to group
     add_host: name={{ item.private_ip }} groups=just_created
     with_items: ami_instance.instances

   - name: create hosts file
     shell: echo "{{ item.private_ip }} mongodb0{{ count }}.preprod-int.ovchosting.co.uk mongodb0{{ count }}" >> hosts
     with_items: ami_instance.instances

#create third server
- name: Create third server
  hosts: localhost
  vars:
    count: 03
  connection: local
  gather_facts: False
  roles:
   - create_server

  tasks:
   - name: add host to group
     add_host: name={{ item.private_ip }} groups=just_created
     with_items: ami_instance.instances

   - name: create hosts file
     shell: echo "{{ item.private_ip }} mongodb0{{ count }}.preprod-int.ovchosting.co.uk mongodb0{{ count }}" >> hosts
     with_items: ami_instance.instances

- name: Install mongo
  hosts: just_created
  remote_user: ec2-user
  sudo: yes
  roles:
    - mongoinstall

  tasks:

    - name: Start mongo on Primary server
      shell: mongod --config /etc/mongod.conf
      when: inventory_hostname == groups.just_created[0]

    - name: Initiate mongo on Primary Server
      shell: "mongo --host {{ priv_ip.stdout }} --eval 'printjson(rs.initiate())' "
      when: inventory_hostname == groups.just_created[0]

    - name: Verify configuration on Primary Server
      shell: "mongo --host {{ priv_ip.stdout }} --eval 'printjson(rs.conf())' "
      when: inventory_hostname == groups.just_created[0]

    - name: Start mongo on Other Servers
      shell: mongod --config /etc/mongod.conf
      when: inventory_hostname != groups.just_created[0]

    - name: Add mongodb02 to the cluster
      shell: mongo --host {{ groups.just_created[0] }} --eval 'printjson(rs.add("{{ groups.just_created[1] }}:27017"))'
      when: inventory_hostname == groups.just_created[1]

    - name: Add mongodb03 to the cluster
      shell: mongo --host {{ groups.just_created[0] }} --eval 'printjson(rs.add("{{ groups.just_created[2] }}:27017"))'
      when: inventory_hostname == groups.just_created[2]
