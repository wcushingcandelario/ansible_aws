- name: Stop Jetty
  service:
    name: jetty
    state: stopped
  become: yes
  become_user: root

- name: Remove App-Data
  file: path="{{ ovc_install_dir }}/Application-Dynamic-Objects/Point-Of-Sale/App-Data/tp-all" state=absent
  become: yes
  become_user: root

- name: Remove Shared-Data
  file: path="{{ ovc_install_dir }}/Application-Dynamic-Objects/Point-Of-Sale/Shared-Data/tp-all" state=absent
  become: yes
  become_user: root

- name: Remove Client-Data
  file: path="{{ ovc_install_dir }}/Application-Dynamic-Objects/Point-Of-Sale/Client-Data/tp-all" state=absent
  become: yes
  become_user: root

- name: Remove Server-Data
  file: path="{{ ovc_install_dir }}/Application-Dynamic-Objects/Point-Of-Sale/Server-Data/tp-all" state=absent
  become: yes
  become_user: root

- name: Remove ImportFiles
  file: path="{{ ovc_install_dir }}/Base-Location-Import-Files/tp-all" state=absent
  become: yes
  become_user: root

- name: Remove TPExtensions-X.Y.Z.jar
  file: path="{{ item }}" state=absent
  with_fileglob:
    - "{{ jetty_dir }}/lib/ext/TPExtensions*"
  become: yes
  become_user: root

- name: Create OVC_Customizations
  file:
    path: "{{ ovc_install_dir }}/installFiles/OVC_Customizations"
    state: directory
  become: yes
  become_user: "{{ jetty_user_login }}"

- name: Download tpdata.tar.gz from S3
  command: "aws s3 cp s3://ovc-travisperkins-releases/{{ ovc_version }}/tpdata.tar.gz {{ ovc_server_user_dir }}/installFiles/tpdata.tar.gz"
  when: s3install is defined
  become: yes
  become_user: root

- name: Make jetty user own tpdata.tar.gz when downloaded from S3
  file:
    path: "{{ ovc_server_user_dir }}/installFiles/tpdata.tar.gz"
    mode: ug+rw
    owner: "{{ jetty_user_login }}"
    group: "{{ jetty_group_name }}"
  when: s3install is defined
  become: yes
  become_user: root

- name: Unarchive tpdata.tar.gz from S3
  unarchive:
    copy: no
    src: "{{ ovc_server_user_dir }}/installFiles/tpdata.tar.gz"
    dest: "{{ ovc_install_dir }}/installFiles/OVC_Customizations"
    owner: "{{ jetty_user_login }}"
    group: "{{ jetty_group_name }}"
  when: s3install is defined
  become: yes
  become_user: root

- name: Unarchive tpdata.tar.gz from local
  unarchive:
    src: tpdata.tar.gz
    dest: "{{ ovc_install_dir }}/installFiles/OVC_Customizations"
  when: s3install is not defined
  become: yes
  become_user: "{{ jetty_user_login }}"

- name: Copy eCommerce Import Files
  synchronize:
    src: "{{ ovc_install_dir }}/installFiles/OVC_Customizations/importFiles/eCommerceImportFiles/"
    dest: "{{ ovc_install_dir }}/Base-Location-Import-Files/ovc-all-OvcStore/eCommerceImportFiles"
  delegate_to: "{{ inventory_hostname }}"
  become: yes
  become_user: "{{ jetty_user_login }}"

- name: Copy importRootLocations Files
  synchronize:
    src: "{{ ovc_install_dir }}/installFiles/OVC_Customizations/importFiles/importRootLocations/"
    dest: "{{ ovc_install_dir }}/Base-Location-Import-Files/ovc-all-OvcStore/importRootLocations"
  delegate_to: "{{ inventory_hostname }}"
  become: yes
  become_user: "{{ jetty_user_login }}"

- name: Copy Platform-Dynamic-Objects/config Files
  synchronize:
    src: "{{ ovc_install_dir }}/installFiles/OVC_Customizations/deploy/config/uat/"
    dest: "{{ ovc_install_dir }}/Platform-Dynamic-Objects/config"
  delegate_to: "{{ inventory_hostname }}"
  become: yes
  become_user: "{{ jetty_user_login }}"

- name: Copy customerData Files
  synchronize:
    src: "{{ ovc_install_dir }}/installFiles/OVC_Customizations/customerData/"
    dest: "{{ ovc_install_dir }}/Application-Dynamic-Objects/Point-Of-Sale"
  delegate_to: "{{ inventory_hostname }}"
  become: yes
  become_user: "{{ jetty_user_login }}"

- name: Delete Platform-Dynamic-Objects/temp
  file:
    path: "{{ ovc_install_dir }}/Platform-Dynamic-Objects/temp"
    state: absent
  become: yes
  become_user: root

- name: Copy system_configs.php to ovcdashboard
  synchronize:
    src: "{{ ovc_install_dir }}/installFiles/OVC_Customizations/ovcdashboard/app/Config/system_configs.php"
    dest: "{{ html_root }}/ovcdashboard/app/Config/"
  delegate_to: "{{ inventory_hostname }}"
  become: yes
  become_user: "{{ webserver_user }}"

- name: Make system_configs.php owner {{ webserver_user }}
  file:
    path: "{{ html_root }}/ovcdashboard/app/Config/system_configs.php"
    owner: "{{ webserver_user }}"
    mode: 0777
  become: yes
  become_user: root

- name: Download TPExtensions from S3
  command: "aws s3 cp s3://ovc-travisperkins-releases/{{ ovc_version }}/TPExtensions-{{ ovc_version }}.jar {{ jetty_dir }}/lib/ext/TPExtensions-{{ ovc_version }}.jar"
  when: s3install is defined
  become: yes
  become_user: jetty

- name: Copy TPExtensions Jar to jetty
  copy:
    src: "TPExtensions-{{ ovc_version }}.jar"
    dest: "{{ ovc_install_dir }}/lib/ext/TPExtensions-{{ ovc_version }}.jar"
    owner: "{{ jetty_user_login }}"
    group: "{{ jetty_user_login }}"
    mode: 0644
  when: s3install is not defined
  become: yes
  become_user: "{{ jetty_user_login }}"

- name: Update Jetty context.xml to include TPExtensions
  lineinfile:
    dest: "{{ jetty_dir }}/webapps/context.xml"
    insertafter: '<Set name="overrideDescriptor">.*'
    line: '<Set name="extraClasspath">{{ jetty_dir }}/lib/ext/TPExtensions-{{ ovc_version }}.jar</Set>'
  become: yes
  become_user: "{{ jetty_user_login }}"

- name: Update Jetty context.xml to include Plain Text SQS with region
  replace:
    dest: "{{ jetty_dir }}/webapps/context.xml"
    regexp: .*org\.skyscreamer\.nevado\.jms\.connector\.amazonaws.*[^\n]*\n.*Set>
    replace: '\t\t\t<New class="org.skyscreamer.nevado.jms.connector.amazonaws.PlainTextAmazonSQSConnectorFactory"/>  </Set>  <Set name="awsSQSEndpoint">{{ sqs_endpoint }}</Set>'
  become: yes
  become_user: "{{ jetty_user_login }}"

- name: Update Jetty context.xml to include SQS Queue URL
  lineinfile:
    dest: "{{ jetty_dir }}/webapps/context.xml"
    regexp: '<Set name="queueUrl">.*'
    line: '<Set name="queueUrl">{{ sqs_queue_url }}</Set>'
  become: yes
  become_user: "{{ jetty_user_login }}"

- name: Edit Jetty start.ini to add plus module
  lineinfile:
    dest: "{{ jetty_dir }}/start.ini"
    line: "--module=plus"
  become: yes
  become_user: "{{ jetty_user_login }}"

- name: Edit Jetty start.ini to add ext module
  lineinfile:
    dest: "{{ jetty_dir }}/start.ini"
    line: "--module=ext"
  become: yes
  become_user: "{{ jetty_user_login }}"

- name: Edit Jetty start.ini to add AWS Access Key
  lineinfile:
    dest: "{{ jetty_dir }}/start.ini"
    regexp: "-Daws.accessKeyId.*"
    line: "-Daws.accessKeyId={{ sqs_access_key_id | default('')}}"
    state: present
  become: yes
  become_user: "{{ jetty_user_login }}"

- name: Edit Jetty start.ini to add AWS Secret Key
  lineinfile:
    dest: "{{ jetty_dir }}/start.ini"
    regexp: "-Daws.secretKeyId.*"
    line: "-Daws.secretKeyId={{ sqs_access_secret_id | default('')}}"
    state: present
  become: yes
  become_user: "{{ jetty_user_login }}"


- name: Edit tools.properties to tp-all
  lineinfile:
    dest: "{{ ovc_install_dir }}/Platform-Dynamic-Objects/config/tools.properties"
    regexp: "ovcServer.customer-all.*"
    line: "ovcServer.customer-all=tp-all"
  become: yes
  become_user: "{{ jetty_user_login }}"

- name: Edit tools.properties to import all stores
  lineinfile:
    dest: "{{ ovc_install_dir }}/Platform-Dynamic-Objects/config/tools.properties"
    regexp: "posMClientSyncUpdater.store.*"
    line: "posMClientSyncUpdater.store=All"
  become: yes
  become_user: "{{ jetty_user_login }}"

- name: Create initDevAll.sh
  command: "cp initOVCServer.sh initDevAll.sh"
  args:
    chdir: "{{ ovc_install_dir }}/bin"
    creates: "{{ ovc_install_dir }}/bin/initDevAll.sh"
  become: yes
  become_user: "{{ jetty_user_login }}"

- name: Set initDevAll.sh to run devAll
  replace:
    dest: "{{ ovc_install_dir }}/bin/initDevAll.sh"
    regexp: "eComInit"
    replace: "devAll"
    backup: no
  become: yes
  become_user: "{{ jetty_user_login }}"

- name: Cleanup MIME files via devAll
  lineinfile:
    dest: "{{ ovc_install_dir }}/bin/initDevAll.sh"
    line: 'find /tmp/ -type f -name "MIME*" -exec rm {} \;'
  become: yes
  become_user: "{{ jetty_user_login }}"

- name: Cleanup initialDB files via devAll
  lineinfile:
    dest: "{{ ovc_install_dir }}/bin/initDevAll.sh"
    line: 'find /tmp/ -type f -name "initialDB*" -exec rm {} \;'
  become: yes
  become_user: "{{ jetty_user_login }}"

# DIDN'T WORK:
#- name: Import TP SQL
#  mysql_db:
#   state: import
#    name: xdb
#    target: "{{ ovc_install_dir }}/installFiles/OVC_Customizations/customerData/sql/tp-alters-4120-mysql.sql"

- stat:
    path: "{{ ovc_install_dir }}/installFiles/OVC_Customizations/customerData/sql/tp-alters-{{ ovc_version }}-mysql.sql"
  register: custom_db_script

# WORKS
- name: Import TP SQL
  shell: "mysql -u {{ ovcDB_username }} -p{{ ovcDB_password }} -h {{ ovcDB_host }} {{ ovcDB_db }} < {{ ovc_install_dir }}/installFiles/OVC_Customizations/customerData/sql/tp-alters-{{ ovc_version }}-mysql.sql"
  tags:
    - import_custom_db
  when: custom_db_script.stat.exists == True
  register: custom_db_import_result

- name: Start Jetty
  service:
    name: jetty
    state: started
  tags:
    - startjetty
  become: yes
  become_user: root

- name: Initialize OneView Server
  shell: "{{ ovc_install_dir }}/bin/initDevAll.sh"
  become: yes
  become_user: jetty
  register: initilization
  async:  6000
  tags:
    - importers
    - tpimporters
  notify: Restart Jetty

- debug: var=initilization

- name: Restart Jetty
  service:
    name: jetty
    state: restarted
  tags:
    - startjetty
  become: yes
  become_user: root





















# # Dumps all databases to hostname.sql
# - name: Backup DB
#   mysql_db:
#     state: dump
#     name: xdb
#     target: /opt/ovc/xdb_back.sql
#     login_user: root
#     login_password: root
#   become: yes
#   become_user: root
#
# - name: Import DB
#   mysql_db:
#     state: import
#     name: xdb
#     target: /home/ec2-user/MySQL/xdb_dt.sql
#     login_user: root
#     login_password: root
#   become: yes
#   become_user: root
#
# - name: Executing clob tbl truncate
#   command: mysql -u root -proot xdb -e "truncate table xdb.clob_tbl"
#   become: yes
#   become_user: root
#
# - name: Start Jetty
#   service:
#     name: jetty
#     state: started
#   become: yes
#   become_user: root
#
# - name: Remove temp Hash File
#   file: path="{{ ovc_install_dir }}/Platform-Dynamic-Objects/temp/" state=absent
#   become: yes
#   become_user: root
#
#
# - name: Run init script
#   command: sh initOVCServer.sh
#   args:
#       chdir: "{{ ovc_install_dir }}/bin/"
#   become: yes
#   become_user: root
