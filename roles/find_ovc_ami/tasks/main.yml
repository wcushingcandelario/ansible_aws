- name: Finding latest Amazon Linux ami
  ec2_ami_find:
    name: "amzn-ami-hvm-*.0.x86_64-gp2"
    sort: name
    sort_order: descending
    region: "{{ ami_region }}"
    sort_end: 1
  register: al_ami_find
  when: customer == 'vanilla'

- set_fact:
    _ami_customer: "{{ force_ami_customer }}"
  when: force_ami_customer is defined

- set_fact:
    _ami_customer: "{{ ami_customer }}"
  when: force_ami_customer is undefined

- name: Finding latest OVC customised Amazon Linux ami
  ec2_ami_find:
    name: "ovc-{{ find_ovc_version }}*"
    sort: name
    sort_order: descending
    region: "{{ ami_region }}"
    sort_end: 1
    owner: "{{ ami_owner }}"
    no_result_action: fail
    ami_tags:
      customer: "{{ _ami_customer }}"
      release: "{{ ami_release }}"
  register: ovc_ami_find
  when: customer != 'vanilla' and find_ami_branch is undefined and ami_role == 'ami_builder'

- name: Finding latest OVC customised Amazon Linux ami with a branch
  ec2_ami_find:
    name: "ovc-{{ find_ovc_version }}*"
    sort: name
    sort_order: descending
    region: "{{ ami_region }}"
    sort_end: 1
    owner: "{{ ami_owner }}"
    no_result_action: fail
    ami_tags:
      customer: "{{ _ami_customer }}"
      release: "{{ ami_release }}"
      git_branch: "{{ find_ami_branch }}"
  register: ovc_ami_find_branch
  when: customer != 'vanilla' and find_ami_branch is defined and ami_role == 'ami_builder'

- name: Finding latest OVC customised Amazon Linux AMI with a git SHA (reties for four minutes for the build system)
  ec2_ami_find:
    name: "ovc-{{ find_ovc_version }}*"
    sort: name
    sort_order: descending
    region: "{{ ami_region }}"
    sort_end: 1
    owner: "{{ ami_owner }}"
    no_result_action: fail
    ami_tags:
      customer: "{{ _ami_customer }}"
      release: "{{ ami_release }}"
      git_sha: "{{ find_ami_sha }}"
  register: ovc_ami_find_sha
  until: ovc_ami_find_sha|success
  retries: 24
  delay: 10
  when: customer != 'vanilla' and find_ami_sha is defined

- name: Finding latest OVC customised Amazon Linux AMI with Mongo Cloud Manager
  ec2_ami_find:
    name: "mongo-mms-*"
    sort: name
    sort_order: descending
    region: "{{ ami_region }}"
    sort_end: 1
    owner: "{{ ami_owner }}"
    no_result_action: fail
  register: ovc_ami_find_mongo
  when: ami_role == 'mongo_ami'

- set_fact:
    ami_find: "{{ al_ami_find }}"
  when: customer == 'vanilla'

- set_fact:
    ami_find: "{{ ovc_ami_find }}"
  when: customer != 'vanilla' and find_ami_branch is undefined and find_ami_sha is undefined

- name: Setting AMI ID to AMI ID found with git branch
  set_fact:
    ami_find: "{{ ovc_ami_find }}"
  when: customer != 'vanilla' and find_ami_branch is undefined

- set_fact:
    ami_find: "{{ ovc_ami_find_branch }}"
  when: customer != 'vanilla' and find_ami_branch is defined

- name: Setting AMI ID to AMI ID found with git SHA (overrides branch!)
  set_fact:
    ami_find: "{{ ovc_ami_find_sha }}"
  when: customer != 'vanilla' and find_ami_sha is defined

- name: Setting AMI ID to Mongo AMI
  set_fact:
    ami_find: "{{ ovc_ami_find_mongo }}"
  when: customer != 'vanilla' and ami_role == 'mongo_ami'

- name: AMI ID found
  debug: "var=ami_find.results"
