---
# This playbook will install the OneView Server.
- name: Stop Jetty
  service:
    name: jetty
    state: stopped
    enabled: yes
  when: "upgrade_version_from is not defined"
  become: yes
  become_user: root

- name: Clear Jetty logs
  command: "rm -f *log*"
  args:
    chdir: "{{ jetty_dir }}/logs"
  when: "upgrade_version_from is not defined"
  become: yes
  become_user: "{{ jetty_user_login }}"

- name: Delete OVC Root Directory
  file:
    path="{{ ovc_install_dir }}"
    state=absent
  when: "upgrade_version_from is not defined"
  become: yes
  become_user: root

- name: Delete OVC Install Files Directory
  file:
    path="{{ ovc_install_dir }}/installFiles"
    state=absent
  when: "upgrade_version_from is defined"
  become: yes
  become_user: root

- name: Create OVC Install Files Directory
  file:
    path="{{ ovc_install_dir }}/installFiles"
    mode=g+rw
    state=directory
    owner=jetty
    group=jetty
  become: yes
  become_user: root

- name: Download OneView Install from S3 using version
  s3:
   bucket: "{{ s3_bucket | default('ovc-release') }}"
   object: "{{ ovc_version }}/oneview-install.zip"
   dest: "{{ ovc_server_user_dir }}/oneview-install.zip"
   mode: get
  when: s3_ovc_object is not defined
  become: yes
  become_user: root

- name: Download OneView Install from S3 using GIT SHA1
  s3:
   bucket: "{{ s3_bucket | default('ovc-release-provisioner') }}"
   object: "{{ s3_ovc_object }}/oneview-install.zip"
   dest: "{{ ovc_server_user_dir }}/oneview-install.zip"
   mode: get
  when: s3_ovc_object is defined
  become: yes
  become_user: root

- name: Make jetty user own OVC Install zip when downloaded from S3
  file:
    path: "{{ ovc_server_user_dir }}/oneview-install.zip"
    mode: ug+rw
    owner: jetty
    group: jetty
  when: s3install is defined and s3install
  become: yes
  become_user: root

- name: Copy MySQL JAR to jetty
  copy:
    src: mysql-connector-java-5.1.34-bin.jar
    dest: "{{ jetty_dir }}/lib/ext/mysql-connector-java-5.1.34-bin.jar"
    owner: jetty
    group: jetty
  become: yes
  become_user: root
- name: Copy OneView install file
  copy:
    src: oneview-install.zip
    dest: "{{ ovc_server_user_dir }}/oneview-install.zip"
    owner: jetty
    group: jetty
    mode: ug+rw
  when: s3install is not defined or not s3install
  become: yes
  become_user: root

- name: Unzip oneview-install
  unarchive:
    copy: no
    src: "{{ ovc_server_user_dir }}/oneview-install.zip"
    dest: "{{ ovc_install_dir }}/installFiles/"
    owner: jetty
    group: jetty
  become: yes
  become_user: root

- name: Make jetty user own OVC Install
  file:
    path: "{{ ovc_install_dir }}/installFiles"
    mode: ug+rw
    recurse: yes
    owner: jetty
    group: jetty
  become: yes
  become_user: root

- name: Copy Nevado shaded jar to jetty
  shell: cp nevado* {{ jetty_dir }}/lib/ext/
  args:
    chdir: "{{ ovc_install_dir }}/installFiles/OVC_Install"
  become: yes
  become_user: "{{ jetty_user_login }}"

- name: Make jetty user own Nevado JAR
  file:
    path: "{{ item }}"
    mode: ug+rw
    owner: jetty
    group: jetty
  with_fileglob:
    - "{{ jetty_dir }}/lib/ext/nevado*"
  become: yes
  become_user: root

- name: Create silentInstaller file
  template:
    src: silentInstaller.properties.j2
    dest: "{{ ovc_install_dir }}/installFiles/OVC_Install/silentInstaller.properties"
  become: yes
  become_user: "{{ jetty_user_login }}"

- name: Create jetty context.xml file
  template:
    src: context.xml.j2
    dest: "{{ jetty_dir }}/webapps/context.xml"
  become: yes
  become_user: "{{ jetty_user_login }}"

- name: Create jetty pos.d directory
  file:
    path="{{ jetty_dir }}/webapps/pos.d"
    state=directory
    mode=ug+rw
    owner=jetty
    group=jetty
  become: yes
  become_user: root

- name: Install OneView
  include: oneview-install-command.yml
  when: "upgrade_version_from is not defined"

- name: Upgrade OneView
  include: oneview-upgrade-command.yml
  when: "upgrade_version_from is defined"

- name: Copy MySQL JAR to ovc/lib/ext
  copy:
    src: mysql-connector-java-5.1.34-bin.jar
    dest: "{{ ovc_install_dir }}/lib/ext/mysql-connector-java-5.1.34-bin.jar"
    owner: jetty
    group: jetty
  become: yes
  become_user: root

- name: Make OVC init script executable
  file:
    path: "{{ ovc_install_dir }}/bin/initOVCServer.sh"
    mode: ug+rwx
    owner: jetty
    group: jetty
  become: yes
  become_user: root

- name: Set the Hybris store to import from in tools.properties
  lineinfile:
    dest: "{{ ovc_install_dir }}/Platform-Dynamic-Objects/config/tools.properties"
    state: present
    regexp: "posMClientSyncUpdater.store.*"
    line: "posMClientSyncUpdater.store={{ posMClientSyncUpdater_store }}"
  become: yes
  become_user: root

- name: Set Quartz threads to 1
  lineinfile:
    dest: "{{ ovc_install_dir }}/Platform-Dynamic-Objects/config/quartz.properties"
    state: present
    regexp: "org.quartz.threadPool.threadCount.*"
    line: "org.quartz.threadPool.threadCount = 1"
  become: yes
  become_user: "{{ jetty_user_login }}"
- name: Add configurations to jettys start.ini
  lineinfile:
    dest: "{{ jetty_dir }}/start.ini"
    state: present
    line: "{{ item.line }}"
  with_items:
    - { line: '-Dovc.config.dir={{ ovc_install_dir }}/Platform-Dynamic-Objects/config'}
    - { line: '-Dlogback.configurationFile={{ ovc_install_dir }}/Platform-Dynamic-Objects/config/logback.xml'}
    - { line: '-Dquartz.config.file=/opt/ovc/Platform-Dynamic-Objects/config/quartz.properties'}
  become: yes
  become_user: "{{ jetty_user_login }}"

- name: Set the Quartz instanceId
  lineinfile:
    dest: "{{ jetty_dir }}/start.ini"
    state: present
    regexp: "-Dorg.quartz.scheduler.instanceId=.*"
    line: "-Dorg.quartz.scheduler.instanceId={{ inventory_hostname_short | default('localhost') }}"
  become: yes
  become_user: "{{ jetty_user_login }}"

- name: Copy logback.xml template to Platform-Dynamic-Objects/config
  template:
    src: logback.xml.j2
    dest: "{{ ovc_install_dir }}/Platform-Dynamic-Objects/config/logback.xml"
  become: yes
  become_user: "{{ jetty_user_login }}"

- name: Import ONLY from OvcElecStore when importing from electronics
  template:
    src: locationWhiteList.ovccfg.j2
    dest: "{{ ovc_install_dir }}/Application-Dynamic-Objects/Point-Of-Sale/Server-Data/Client-grp-all/config/posMServer/locationWhiteList.ovccfg"
  become: yes
  become_user: "{{ jetty_user_login }}"
  when: "{{ ecommerce_fromServer_baseSiteId | search('.*electronics.*') }}"

- name: Start Jetty
  service:
    name: jetty
    state: restarted
    enabled: yes
  tags:
    - startjetty
  become: yes
  become_user: root
