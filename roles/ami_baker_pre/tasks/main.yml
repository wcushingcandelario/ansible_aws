- name: launch temporary instance
  local_action:
    module: ec2
    assign_public_ip: yes
    key_name: "{{ key }}"
    region: "{{ ami_baker_region }}"
    group_id: "{{ ovc_security_groups }}"
    instance_type: "{{ instance_type }}"
    vpc_subnet_id: "{{ vpc_subnet_public }}"
    image: "{{ ami_find.results[0].ami_id }}"
    wait: yes
    instance_profile_name: "{{ ami_baker_instance_profile_name }}"
    exact_count: 1
    count_tag:
      role: ami_builder
    instance_tags:
      role: ami_builder
      Name: ami_builder
  when: ami_find.results[0].ami_id is defined
  register: ami_instance

- name: Record source AMI
  set_fact:
    source_ami: "{{ ami_find.results[0].ami_id }}"

- name: Set IP fact (public).
  set_fact:
    ssh_ip: "{{ ami_instance.tagged_instances.0.public_ip }}"
  when: use_public_ip and ami_instance.tagged_instances is defined

- name: Set IP fact (private).
  set_fact:
    ssh_ip: "{{ ami_instance.tagged_instances.0.private_ip }}"
  when: not use_public_ip and ami_instance.tagged_instances is defined

- name: Set the Instance ID fact
  set_fact:
    just_created_instance_id: "{{ ami_instance.tagged_instances.0.id }}"
  when: ami_instance.tagged_instances is defined

- name: Set fake data for --check
  set_fact:
    ssh_ip: "BAD_AMI_IP__LOOKUP_FAILED"
    just_created_instance_id: "BAD_INSTANCE_ID"
  when: ami_instance.tagged_instances is undefined

- name: Show IP
  debug:
    var: ssh_ip

- name: wait for ssh to come up
  wait_for: host={{ ssh_ip }} delay=30 port=22 state=started timeout=640
  with_items: ami_instance.instances

- name: Add host to group just_created
  add_host: name={{ ssh_ip }} groups=just_created

- name: Add host to group just_baked
  add_host: name={{ ssh_ip }} groups=just_baked
