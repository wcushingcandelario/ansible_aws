
- name: Set SSL based facts (SSL)
  set_fact:
    ovc_url: "https://{{ deploy_type }}.{{ dns_domain }}"
    dash_path: "https://{{ deploy_type }}.{{ dns_domain }}/ovcdashboard/"
    jms_path: "https://{{ deploy_type }}.{{ dns_domain }}/json/jmshandler"
    broker_path: "tcp://{{ deploy_type }}.{{ dns_domain }}:3008"
    broadcast_path: "tcp://*:3008"
    auth_path: "https://{{ deploy_type }}.{{ dns_domain }}:3009"
    api_path: "https://{{ deploy_type }}.{{ dns_domain }}:3007"
  when: ssl_certificate_id is defined and (ssl_certificate_id != 'false')

- name: Set SSL based facts (Non-SSL)
  set_fact:
    ovc_url: "http://{{ deploy_type }}.{{ dns_domain }}:8080"
    dash_path: "http://{{ deploy_type }}.{{ dns_domain }}/ovcdashboard/"
    jms_path: "http://{{ deploy_type }}.{{ dns_domain }}:8080/json/jmshandler"
    broker_path: "tcp://{{ deploy_type }}.{{ dns_domain }}:3008"
    broadcast_path: "tcp://*:3008"
    auth_path: "http://{{ deploy_type }}.{{ dns_domain }}:3009"
    api_path: "http://{{ deploy_type }}.{{ dns_domain }}:3007"
  when: ssl_certificate_id is undefined or (ssl_certificate_id == 'false')


- name: Creating Inventory Manager Beanstalk application
  connection: local
  elasticbeanstalk_app:
    region: "{{ region }}"
    app_name: "{{ deploy_type }}"
    description: "{{ deploy_type }}"
    state: present
  register: application


- name: Copy Beanstalk template to temp directory
  connection: local
  template:
     src: im_tags.j2
     dest: "/tmp/im_tags"

- name: Upload Beanstalk template to S3
  s3:
   bucket: "{{ s3_bucket_beanstalk }}"
   object: "/resources/templates/{{ deploy_type }}/im_tags"
   src: "/tmp/im_tags"
   mode: put

- name: Remove Beanstalk template
  connection: local
  file:
    path: "/tmp/im_tags"
    state: absent

- debug: var=application


- name: Making new Inventory Manger docker file
  connection: local
  template:
     src: Dockerrun.aws.json.j2
     dest: "/tmp/{{ deploy_type }}.invtmgr.Dockerrun.aws.json"

- name: Uploading new Inventory Manager docker file to S3
  connection: local
  s3:
    bucket: "{{ s3_bucket_docker }}"
    mode: put
    object: "{{ deploy_type }}.invtmgr.Dockerrun.aws.json"
    src: "/tmp/{{ deploy_type }}.invtmgr.Dockerrun.aws.json"

- name: Removing docker temp file
  connection: local
  file:
    path: "/tmp/{{ deploy_type }}.invtmgr.Dockerrun.aws.json"
    state: absent

- name: Versioning Inventory Manager application
  elasticbeanstalk_version:
    region: "{{ region }}"
    app_name: "{{ deploy_type }}"
    version_label: "{{ im_version }}"
    s3_bucket: "{{ s3_bucket_docker }}"
    s3_key: "{{ deploy_type }}.invtmgr.Dockerrun.aws.json"
    state: present
  register: version

- debug: var=version

- name: Create new SSL Inventory Manager environment
  elasticbeanstalk_env:
    region: "{{ region }}"
    app_name: "{{ deploy_type }}"
    env_name: "{{ deploy_type }}-InventoryManager"
    tier_name: "{{ tier }}"
    version_label: "{{ im_version }}"

    template_name: im_tags
    
    solution_stack_name: "{{ solution_stack_name }}"

    option_settings:
     - Namespace: aws:elb:listener
       OptionName: ListenerEnabled
       Value: false
     - Namespace: aws:elb:loadbalancer
       OptionName: CrossZone
       Value: true
     - Namespace: aws:elasticbeanstalk:application
       OptionName: Application Healthcheck URL

       Value: HTTP:3007/getHealthCheck

       Value: TCP:22

     - Namespace: aws:elb:listener:443
       OptionName: ListenerProtocol
       Value: HTTPS
     - Namespace: aws:elb:listener:443
       OptionName: InstancePort
       Value: 80
     - Namespace: aws:elb:listener:443
       OptionName: InstanceProtocol
       Value: HTTP
     - Namespace: aws:elb:listener:443
       OptionName: SSLCertificateId
       Value: "{{ ssl_certificate_id }}"
     - Namespace: aws:elb:listener:3007
       OptionName: ListenerProtocol
       Value: HTTPS
     - Namespace: aws:elb:listener:3007
       OptionName: InstancePort
       Value: 3007
     - Namespace: aws:elb:listener:3007
       OptionName: InstanceProtocol
       Value: HTTP
     - Namespace: aws:elb:listener:3007
       OptionName: SSLCertificateId
       Value: "{{ ssl_certificate_id }}"
     - Namespace: aws:elb:listener:3008
       OptionName: InstanceProtocol
       Value: TCP
     - Namespace: aws:elb:listener:3008
       OptionName: ListenerProtocol
       Value: TCP
     - Namespace: aws:elb:listener:3008
       OptionName: InstancePort
       Value: 3008
     - Namespace: aws:elb:listener:3009
       OptionName: ListenerProtocol
       Value: HTTPS
     - Namespace: aws:elb:listener:3009
       OptionName: InstancePort
       Value: 3009
     - Namespace: aws:elb:listener:3009
       OptionName: InstanceProtocol
       Value: HTTP
     - Namespace: aws:elb:listener:3009
       OptionName: SSLCertificateId
       Value: "{{ ssl_certificate_id }}"
     - Namespace: aws:autoscaling:asg
       OptionName: MinSize
       Value: "{{ min_size }}"
     - Namespace: aws:autoscaling:asg
       OptionName: MaxSize
       Value: "{{ max_size }}"
     - Namespace: aws:elb:loadbalancer
       OptionName: SecurityGroups
       Value: "{{ im_security_groups }}"
     - Namespace: aws:elb:loadbalancer
       OptionName: ManagedSecurityGroup
       Value: "{{ elb_security_group_id }}"
     - Namespace: aws:elasticbeanstalk:environment
       OptionName: ServiceRole
       Value: "{{ beanstalk_service_role }}"
     - Namespace: aws:elasticbeanstalk:environment
       OptionName: EnvironmentType
       Value: LoadBalanced
     - Namespace: aws:ec2:vpc
       OptionName: Subnets
       Value: "{{ elb_im_subnets }}"
     - Namespace: aws:ec2:vpc
       OptionName: VPCId
       Value: "{{ vpc_id }}"
     - Namespace: aws:ec2:vpc
       OptionName: ELBSubnets
       Value: "{{ elb_im_subnets }}"
     - Namespace: aws:ec2:vpc
       OptionName: ELBScheme
       Value: "{{ elb_scheme }}"
     - Namespace: aws:ec2:vpc
       OptionName: AssociatePublicIpAddress
       Value: true
     - Namespace: aws:autoscaling:launchconfiguration
       OptionName: IamInstanceProfile
       Value: "{{ beanstalk_iam_role }}"
     - Namespace: aws:autoscaling:launchconfiguration
       OptionName: InstanceType
       Value: "{{ instance_type_invtmgr }}"
     - Namespace: aws:autoscaling:launchconfiguration
       OptionName: SecurityGroups
       Value: "{{ im_security_groups }}"
     - Namespace: aws:autoscaling:launchconfiguration
       OptionName: EC2KeyName
       Value: "{{ key }}"
  when: ssl_certificate_id is defined and (ssl_certificate_id != 'false')


- name: Create new Non-SSL Inventory Manager environment
  elasticbeanstalk_env:
    region: "{{ region }}"
    app_name: "{{ deploy_type }}"
    env_name: "{{ deploy_type }}-InventoryManager"
    tier_name: "{{ tier }}"
    version_label: "{{ im_version }}"

    template_name: im_tags

    solution_stack_name: "{{ solution_stack_name }}"

    option_settings:
     - Namespace: aws:elb:loadbalancer
       OptionName: CrossZone
       Value: true
     - Namespace: aws:elasticbeanstalk:application
       OptionName: Application Healthcheck URL

       Value: HTTP:3007/getHealthCheck

       Value: TCP:22

     - Namespace: aws:elb:listener:3007
       OptionName: ListenerProtocol
       Value: HTTP
     - Namespace: aws:elb:listener:3007
       OptionName: InstanceProtocol
       Value: HTTP
     - Namespace: aws:elb:listener:3007
       OptionName: InstancePort
       Value: 3007
     - Namespace: aws:elb:listener:3008
       OptionName: InstanceProtocol
       Value: TCP
     - Namespace: aws:elb:listener:3008
       OptionName: ListenerProtocol
       Value: TCP
     - Namespace: aws:elb:listener:3008
       OptionName: InstancePort
       Value: 3008
     - Namespace: aws:elb:listener:3009
       OptionName: InstanceProtocol
       Value: HTTP
     - Namespace: aws:elb:listener:3009
       OptionName: ListenerProtocol
       Value: HTTP
     - Namespace: aws:elb:listener:3009
       OptionName: InstancePort
       Value: 3009
     - Namespace: aws:autoscaling:asg
       OptionName: MinSize
       Value: "{{ min_size }}"
     - Namespace: aws:autoscaling:asg
       OptionName: MaxSize
       Value: "{{ max_size }}"
     - Namespace: aws:elb:loadbalancer
       OptionName: SecurityGroups
       Value: "{{ im_security_groups }}"
     - Namespace: aws:elb:loadbalancer
       OptionName: ManagedSecurityGroup
       Value: "{{ elb_security_group_id }}"
     - Namespace: aws:elasticbeanstalk:environment
       OptionName: ServiceRole
       Value: "{{ beanstalk_service_role }}"
     - Namespace: aws:elasticbeanstalk:environment
       OptionName: EnvironmentType
       Value: LoadBalanced
     - Namespace: aws:ec2:vpc
       OptionName: Subnets
       Value: "{{ elb_im_subnets }}"
     - Namespace: aws:ec2:vpc
       OptionName: VPCId
       Value: "{{ vpc_id }}"
     - Namespace: aws:ec2:vpc
       OptionName: ELBSubnets
       Value: "{{ elb_im_subnets }}"
     - Namespace: aws:ec2:vpc
       OptionName: ELBScheme
       Value: "{{ elb_scheme }}"
     - Namespace: aws:ec2:vpc
       OptionName: AssociatePublicIpAddress
       Value: true
     - Namespace: aws:autoscaling:launchconfiguration
       OptionName: IamInstanceProfile
       Value: "{{ beanstalk_iam_role }}"
     - Namespace: aws:autoscaling:launchconfiguration
       OptionName: InstanceType
       Value: "{{ instance_type_invtmgr }}"
     - Namespace: aws:autoscaling:launchconfiguration
       OptionName: SecurityGroups
       Value: "{{ im_security_groups }}"
     - Namespace: aws:autoscaling:launchconfiguration
       OptionName: EC2KeyName
       Value: "{{ key }}"
  when: ssl_certificate_id is undefined or (ssl_certificate_id == 'false')


- name: Record ELB EndpointURL
  shell: "aws elasticbeanstalk describe-environments --query='Environments[?EnvironmentName==`{{ deploy_type }}-InventoryManager` && Status==`Ready`].EndpointURL'"
  register: elb_dns


- name: debug elb dns
  debug: "var=elb_dns"


- name: Add Alias for EndpointURL on Route53
  route53:
    command: "create"
    zone: "{{ dns_domain }}"
    record: "{{ deploy_type }}-invtmgr.{{ dns_domain }}"
    type: "A"
    private_zone: "{{ dns_private_zone }}"
    value: "{{ elb_dns.stdout }}"
    alias: "True"
    alias_hosted_zone_id: "{{ alias_hosted_zone }}"
    overwrite: yes
  when: elb_dns.stdout is defined


- name: Copy data files to tmp directory
  copy: src={{ item }} dest=/tmp/
  with_fileglob:
    - files/*

- name: Load Inventory Manager Data into Mongo DB
  vars:
   directives:
      - { database: 'invtmgr', collection: 'config_tbl', port: 27017, file: 'config_tbl.json' }
      - { database: 'invtmgr', collection: 'directive_rule_def', port: 27017, file: 'directive_rule_def.json' }
      - { database: 'invtmgr', collection: 'directive_type', port: 27017, file: 'directive_type.json' }
      - { database: 'invtmgr', collection: 'permission_tbl', port: 27017, file: 'permission_tbl.json' }
      - { database: 'invtmgr', collection: 'role_permission_tbl', port: 27017, file: 'role_permission_tbl.json' }
      - { database: 'invtmgr', collection: 'tran_rule_def', port: 27017, file: 'tran_rule_def.json' }
      - { database: 'invtmgr', collection: 'tran_type', port: 27017, file: 'tran_type.json' }

  command: mongoimport --host mongodb-{{ deploy_type }}.{{ dns_domain }} --db "{{ item.database }}" --collection "{{ item.collection }}" --port "{{ item.port }}" --file /tmp/"{{ item.file }}"
  with_items:
    - "{{ directives }}"

- name: Remove data files from temp directory
  connection: local
  file:
    path: "{{ item }}"
    state: absent
  with_fileglob:
      - "/tmp/*json"

  tags:
    - inventory_manager
