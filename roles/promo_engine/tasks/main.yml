
- name: Set SSL based facts
  set_fact:
    ovc_url: "https://{{ deploy_type }}.{{ dns_domain }}"
    dash_path: "https://{{ deploy_type }}.{{ dns_domain }}/ovcdashboard/"
    promo_path: "https://{{ deploy_type }}.{{ dns_domain }}:3000/promotions/"
  when: ssl_certificate_id is defined and (ssl_certificate_id != 'false')

- name: Set Non-SSL based facts
  set_fact:
    ovc_url: "http://{{ deploy_type }}.{{ dns_domain }}"
    dash_path: "http://{{ deploy_type }}.{{ dns_domain }}/ovcdashboard/"
    promo_path: "http://{{ deploy_type }}.{{ dns_domain }}:3000/promotions/"
  when: ssl_certificate_id is undefined or (ssl_certificate_id == 'false')


- name: Creating Beanstalk application
  connection: local
  elasticbeanstalk_app:
    region: "{{ region }}"
    app_name: PromoEngine
    description: "{{ deploy_type }}"
    state: present
  register: application

- debug: var=application

- name: Copy Beanstalk template to temp directory
  connection: local
  template:
     src: pe_tags.j2
     dest: "/tmp/pe_tags"

- name: Upload Beanstalk template to S3
  s3:
   bucket: "{{ s3_bucket_beanstalk }}"
   object: "/resources/templates/PromoEngine/pe_tags"
   src: "/tmp/pe_tags"
   mode: put

- name: Remove Beanstalk template
  connection: local
  file:
    path: "/tmp/pe_tags"
    state: absent

- name: Create the application source file
  connection: local
  template:
     src: Dockerrun.aws.json.j2
     dest: "/tmp/{{ deploy_type }}.Dockerrun.aws.json"

- name: Upload the application source file to S3
  connection: local
  s3:
    bucket: "{{ s3_bucket_docker }}"
    mode: put
    object: "{{ deploy_type }}.Dockerrun.aws.json"
    src: "/tmp/{{ deploy_type }}.Dockerrun.aws.json"

- name: Remove the application source file from temp
  connection: local
  file:
    path: "/tmp/{{ deploy_type }}.Dockerrun.aws.json"
    state: absent

- name: Versioning the application source file
  elasticbeanstalk_version:
    region: "{{ region }}"
    app_name: PromoEngine
    version_label: "{{ pe_version }}"
    s3_bucket: "{{ s3_bucket_docker }}"
    s3_key: "{{ deploy_type }}.Dockerrun.aws.json"
    state: present
  register: version

- debug: var=version

- name: Create Non-SSL Beanstalk environment
  elasticbeanstalk_env:
    region: "{{ region }}"
    app_name: PromoEngine
    env_name: "{{ deploy_type }}-PromoEngine"
    tier_name: "{{ tier }}"
    version_label: "{{ pe_version }}"
    template_name: pe_tags
    option_settings:
     - Namespace: aws:elb:loadbalancer
       OptionName: CrossZone
       Value: true
     - Namespace: aws:elasticbeanstalk:application
       OptionName: Application Healthcheck URL
       Value: HTTP:3000/healthcheck
     - Namespace: aws:elb:listener
       OptionName: ListenerEnabled
       Value: false
     - Namespace: aws:elb:listener:3000
       OptionName: ListenerProtocol
       Value: HTTP
     - Namespace: aws:elb:listener:3000
       OptionName: InstanceProtocol
       Value: HTTP
     - Namespace: aws:elb:listener:3000
       OptionName: InstancePort
       Value: 3000
     - Namespace: aws:elb:listener:8888
       OptionName: InstanceProtocol
       Value: HTTP
     - Namespace: aws:elb:listener:8888
       OptionName: ListenerProtocol
       Value: HTTP
     - Namespace: aws:elb:listener:8888
       OptionName: InstancePort
       Value: 8888
     - Namespace: aws:autoscaling:asg
       OptionName: MinSize
       Value: "{{ min_size }}"
     - Namespace: aws:autoscaling:asg
       OptionName: MaxSize
       Value: "{{ max_size }}"
     - Namespace: aws:elb:loadbalancer
       OptionName: SecurityGroups
       Value: "{{ security_group_ids }}"
     - Namespace: aws:elb:loadbalancer
       OptionName: ManagedSecurityGroup
       Value: "{{ elb_security_group_id }}"
     - Namespace: aws:elasticbeanstalk:environment
       OptionName: ServiceRole
       Value: "{{ beanstalk_service_role }}"
     - Namespace: aws:elasticbeanstalk:environment
       OptionName: EnvironmentType
       Value: LoadBalanced
     - Namespace: aws:ec2:vpc
       OptionName: Subnets
       Value: "{{ elbsubnets }}"
     - Namespace: aws:ec2:vpc
       OptionName: VPCId
       Value: "{{ vpc_id }}"
     - Namespace: aws:ec2:vpc
       OptionName: ELBSubnets
       Value: "{{ elbsubnets }}"
     - Namespace: aws:ec2:vpc
       OptionName: ELBScheme
       Value: "{{ elb_scheme }}"
     - Namespace: aws:ec2:vpc
       OptionName: AssociatePublicIpAddress
       Value: true
     - Namespace: aws:autoscaling:launchconfiguration
       OptionName: IamInstanceProfile
       Value: "{{ beanstalk_iam_role }}"
     - Namespace: aws:autoscaling:launchconfiguration
       OptionName: InstanceType
       Value: "{{ instance_type_pe }}"
     - Namespace: aws:autoscaling:launchconfiguration
       OptionName: SecurityGroups
       Value: "{{ security_group_ids }}"
     - Namespace: aws:autoscaling:launchconfiguration
       OptionName: EC2KeyName
       Value: "{{ key }}"


- name: Create SSL Beanstalk environment
  elasticbeanstalk_env:
    region: "{{ region }}"
    app_name: PromoEngine
    env_name: "{{ deploy_type }}-PromoEngine"
    tier_name: "{{ tier }}"
    version_label: "{{ pe_version }}"
    template_name: pe_tags
    option_settings:
     - Namespace: aws:elb:listener:8888
       OptionName: ListenerEnabled
       Value: false
     - Namespace: aws:elb:listener:443
       OptionName: InstanceProtocol
       Value: HTTP
     - Namespace: aws:elb:listener:443
       OptionName: InstancePort
       Value: 8888
     - Namespace: aws:elb:listener:443
       OptionName: ListenerProtocol
       Value: HTTPS
     - Namespace: aws:elb:listener:443
       OptionName: SSLCertificateId
       Value: "{{ ssl_certificate_id }}"
     - Namespace: aws:elb:listener:3000
       OptionName: ListenerProtocol
       Value: HTTPS
     - Namespace: aws:elb:listener:3000
       OptionName: SSLCertificateId
       Value: "{{ ssl_certificate_id }}"
  when: ssl_certificate_id is defined and (ssl_certificate_id != 'false')


- name: Record ELB EndpointURL
  command: "aws elasticbeanstalk describe-environments --query='Environments[?EnvironmentName==`{{ deploy_type }}-PromoEngine` && Status==`Ready`].EndpointURL'"
  register: elb_dns
  when: promo_update is not defined


- name: debug elb dns
  debug: "var=elb_dns"

- name: Add Alias to Route53
  route53:
    command: "create"
    zone: "{{ dns_domain }}"
    record: "{{ deploy_type }}-promo.{{ dns_domain }}"
    type: "A"
    private_zone: "{{ dns_private_zone }}"
    value: "{{ elb_dns.stdout }}"
    alias: "True"
    alias_hosted_zone_id: "{{ alias_hosted_zone }}"
    overwrite: yes
  when: elb_dns.stdout is defined
  tags:
   - promo_engine
