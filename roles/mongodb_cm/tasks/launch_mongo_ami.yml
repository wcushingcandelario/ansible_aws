- name: Use set_fact to AMI
  set_fact:
    image_id: "{{ ami_find.results[0].ami_id }}"
  when: image_id is undefined and ami_find.results is defined
- name: Use set_fact to AMI
  set_fact:
    image_id: BAD_AMI_ID__LOOKUP_FAILED
  when: image_id is undefined and ami_find.results is undefined

- name: Launch instance
  ec2:
    assign_public_ip: yes
    region: "{{ region }}"
    key_name: "{{ key }}"
    group_id: "{{ security_group_ids }}"
    instance_type: "{{ instance_type_mongo }}"
    vpc_subnet_id: "{{ vpc_subnet_id }}"
    image: "{{ image_id }}"
    instance_profile_name: "{{ IAMROLE }}"
    termination_protection: yes
    wait: yes
    wait_timeout: 500
    volumes:
      - device_name: /dev/xvda
        volume_size: 100
#        encrypted: "{{ encrypt_instance }}"
    exact_count: 1
    count_tag:
      Name: "{{ deploy_type }}.{{ dns_domain }}"
      role: mongo-mms
      environment: "{{ deploy_type }}"
    instance_tags:
      Name: "{{ deploy_type }}.{{ dns_domain }}"
      role: mongo-mms
      environment: "{{ deploy_type }}"
  register: ami_instance

- name: Display AMI Instance Details
  debug:
    msg="{{ami_instance}}"

#- name: Add or Update Route53 entry
##  route53:
#    command: "create"
#    zone: "{{ dns_domain }}"
#    hosted_zone_id: "{{ dns_zone_id }}"
#    private_zone: "true"
#    record: "{{ deploy_type }}.{{ dns_domain }}"
#    type: "A"
#    ttl: 300
#    value: "{{ ami_instance.tagged_instances[0].private_ip }}"
#    overwrite: "yes"
#  when: ami_instance.tagged_instances is defined
#  tags:
#    - dns
