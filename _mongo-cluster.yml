---
# Mongo playbook will install a three server cluster

#create first server
- name: Create first server
  hosts: localhost
  vars:
    count: 01
  connection: local
  gather_facts: False
  roles:
   - find_ami
   - create_server

  tasks:
   - name: Clear hosts template
     file: path=templates/hosts state=absent

   - name: add host to group
     add_host: name={{ item.private_ip }} groups=just_created
     with_items: ami_instance.instances

   - name: create hosts file
     # Use copy command
     shell: echo "{{ item.private_ip }} mongodb-{{ deploy_type }}0{{ count }}.ovchosting.co.uk mongodb-{{ deploy_type }}0{{ count }}" >> templates/hosts
     with_items: ami_instance.instances

   - name: Add new Route53 entry
     route53:
       command: "create"
       zone: "ovchosting.co.uk"
       hosted_zone_id: "Z3A98VA7X0SL0T"
       private_zone: "true"
       record: "mongodb-{{ deploy_type }}0{{ count }}.ovchosting.co.uk"
       type: "A"
       ttl: 60
       value: "{{ groups.just_created[0] }}"
       overwrite: yes
     with_items: ami_instance.instances

   - name: Add new Route53 entry
     route53:
       command: "create"
       zone: "ovchosting.co.uk"
       hosted_zone_id: "Z3A98VA7X0SL0T"
       private_zone: "true"
       record: "mongodb-{{ deploy_type }}0{{ count }}.ovchosting.co.uk"
       type: "A"
       ttl: 60
       value: "{{ groups.just_created[0] }}"
       overwrite: yes
     with_items: ami_instance.instances

   - name: wait for ssh to come up
     wait_for: host={{ item.private_ip }} delay=300 port=22 state=started timeout=1200
     with_items: ami_instance.instances

#create second server
- name: Create second server
  hosts: localhost
  vars:
    count: 02
  connection: local
  gather_facts: False
  roles:
   - create_server

  tasks:
   - name: add host to group
     add_host: name={{ item.private_ip }} groups=just_created
     with_items: ami_instance.instances

   - name: create hosts file
     shell: echo "{{ item.private_ip }} mongodb-{{ deploy_type }}0{{ count }}.ovchosting.co.uk mongodb-{{ deploy_type }}0{{ count }}" >> templates/hosts
     with_items: ami_instance.instances

   - name: Add new Route53 entry
     route53:
       command: "create"
       zone: "ovchosting.co.uk"
       hosted_zone_id: "Z3A98VA7X0SL0T"
       private_zone: "true"
       record: "mongodb-{{ deploy_type }}0{{ count }}.ovchosting.co.uk"
       type: "A"
       ttl: 60
       value: "{{ groups.just_created[1] }}"
       overwrite: yes
     with_items: ami_instance.instances

   - name: wait for ssh to come up
     wait_for: host={{ item.private_ip }} delay=300 port=22 state=started timeout=1200
     with_items: ami_instance.instances

   - name: Add new Route53 entry
     route53:
      command: "create"
      zone: "ovchosting.co.uk"
      hosted_zone_id: "Z3A98VA7X0SL0T"
      private_zone: "true"
      record: "mongodb-{{ deploy_type }}0{{ count }}.ovchosting.co.uk"
      type: "A"
      ttl: 60
      value: "{{ groups.just_created[1] }}"
      overwrite: yes
     with_items: ami_instance.instances

#create third server
- name: Create third server
  hosts: localhost
  vars:
    count: 03
  connection: local
  gather_facts: False
  roles:
   - create_server

  tasks:
   - name: add host to group
     add_host: name={{ item.private_ip }} groups=just_created
     with_items: ami_instance.instances

   - name: create hosts file
     shell: echo "{{ item.private_ip }} mongodb-{{ deploy_type }}0{{ count }}.ovchosting.co.uk mongodb-{{ deploy_type }}0{{ count }}" >> templates/hosts
     with_items: ami_instance.instances

   - name: Add new Route53 entry
     route53:
       command: "create"
       zone: "ovchosting.co.uk"
       hosted_zone_id: "Z3A98VA7X0SL0T"
       private_zone: "true"
       record: "mongodb-{{ deploy_type }}0{{ count }}.ovchosting.co.uk"
       type: "A"
       ttl: 60
       value: "{{ groups.just_created[2] }}"
       overwrite: yes
     with_items: ami_instance.instances

   - name: wait for ssh to come up
     wait_for: host={{ item.private_ip }} delay=300 port=22 state=started timeout=1200
     with_items: ami_instance.instances

   - name: Add new Route53 entry
     route53:
      command: "create"
      zone: "ovchosting.co.uk"
      hosted_zone_id: "Z3A98VA7X0SL0T"
      private_zone: "true"
      record: "mongodb-{{ deploy_type }}0{{ count }}.ovchosting.co.uk"
      type: "A"
      ttl: 60
      value: "{{ groups.just_created[2] }}"
      overwrite: yes
     with_items: ami_instance.instances

- name: Install mongo
  hosts: just_created
  remote_user: ec2-user
  become: yes
  become_user: root
  roles:
    - mongoinstall
    - Datadog.datadog
    - mongo_backup
  vars:
    datadog_api_key: "e4cbd7941e565adf937353883df89b2d"

  tasks:
    - name: Start mongo on Primary server
      shell: mongod --config /etc/mongod.conf
      when: inventory_hostname == groups.just_created[0]

    - name: Initiate mongo on Primary Server
      shell: "mongo --host {{ groups.just_created[0] }} --eval 'printjson(rs.initiate())' "
      when: inventory_hostname == groups.just_created[0]

    - name: Verify configuration on Primary Server
      shell: "mongo --host {{ groups.just_created[0] }} --eval 'printjson(rs.conf())' "
      when: inventory_hostname == groups.just_created[0]

    - name: Start mongo on Other Servers
      shell: mongod --config /etc/mongod.conf
      when: inventory_hostname != groups.just_created[0]

    - name: Add mongodb02 to the cluster
      shell: mongo --host {{ groups.just_created[0] }} --eval 'printjson(rs.add("{{ groups.just_created[1] }}:27017"))'
      when: inventory_hostname == groups.just_created[1]

    - name: Add mongodb03 to the cluster
      shell: mongo --host {{ groups.just_created[0] }} --eval 'printjson(rs.add("{{ groups.just_created[2] }}:27017"))'
      when: inventory_hostname == groups.just_created[2]


  #  - name: Copy setAuth.js to Primary
  #    copy:
  #      src: setAuth.js

    - name: Copy to Primary
      copy:
        src: roles/mongoinstall/files/setAuth.js
        dest: /opt/setAuth.js
        mode: 0644
      when: inventory_hostname == groups.just_created[0]
      become: yes
      become_user: root

    - name: Execute setAuth.js
      shell: mongo --host {{ groups.just_created[0] }} < /opt/setAuth.js
      when: inventory_hostname == groups.just_created[0]
